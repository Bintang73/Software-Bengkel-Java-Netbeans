/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package menu;

import fungsi.JTableTransaksi;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import koneksi.myconnection;
import mytransaksi_manager.transaksi_manager;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import transaksi.mytransaksi;

/**
 *
 * @author Administrator
 */
public class form_transaksi extends javax.swing.JFrame {

    static myconnection kon = new myconnection();

    private String Username;
    private int IdSaya;

    /**
     * Creates new form form_transaksi
     */
    public void tampil_comboBarang() {
        try {
            String sql = "Select * from barang_jasa";
            Statement state = kon.getConnection();
            ResultSet rs = state.executeQuery(sql);

            while (rs.next()) {
                cb_namabarang.addItem(rs.getString("nama_barang"));

            }

            rs.last();
            int jumlahdata = rs.getRow();
            rs.first();

        } catch (Exception e) {

        }
    }

    public void tampil_comboMontir() {
        try {
            String sql = "Select * from montir";
            Statement state = kon.getConnection();
            ResultSet rs = state.executeQuery(sql);

            while (rs.next()) {
                cb_namamontir.addItem(rs.getString("nama_montir"));

            }

            rs.last();
            int jumlahdata = rs.getRow();
            rs.first();

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public form_transaksi(String username, int IDku) {
        this.Username = username;
        this.IdSaya = IDku;
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        tampil_comboBarang();
        tampil_comboMontir();
        tbl_transaksi.setModel(sTable);
        tampilTabelTransaksi();

    }

    private void bersih() {
        cb_namabarang.setSelectedIndex(0);
        txt_jumlah.setText("");
        cb_namamontir.setSelectedIndex(0);
        txt_tanggal.setDate(null);
        txt_namapembeli.setText("");
        txt_uangpembeli.setText("");
        txt_cari.setText("");
        tampilTabelTransaksi();
    }

    JTableTransaksi sTable = new JTableTransaksi();

    private void tampilTabelTransaksi() {

        try {

            try {
                Statement state = null;
                state = kon.getConnection();
                int row = tbl_transaksi.getRowCount();
                System.out.println(row);
                for (int i = 0; i < row; i++) {
                    sTable.removeRow(0, row);
                }

                ResultSet rs = state.executeQuery("select * from transaksi");
                while (rs.next()) {
                    mytransaksi trn = new mytransaksi();
                    trn.setKodeTransaksi(rs.getInt("kd_transaksi"));
                    trn.setKodeBarang(rs.getInt("kd_barang"));
                    trn.setNamaBarang(rs.getString("nama_barang"));
                    trn.setNamaPembeli(rs.getString("nama_pembeli"));
                    trn.setHarga(rs.getInt("harga"));
                    trn.setJumlah(rs.getInt("jumlah"));
                    trn.setTotal(rs.getInt("total_bayar"));
                    trn.setUang(rs.getInt("uang_pembeli"));
                    trn.setKembalian(rs.getInt("kembalian"));
                    trn.setId(rs.getInt("id"));
                    trn.setTanggal(rs.getString("tanggal"));
                    trn.setKodeMontir(rs.getInt("kd_montir"));
                    trn.setNamaMontir(rs.getString("nama_montir"));
                    sTable.add(trn);
                }
            } catch (ClassNotFoundException ex) {
                System.out.println(ex);
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_cari = new javax.swing.JButton();
        btn_hapus = new javax.swing.JButton();
        btn_tambah = new javax.swing.JButton();
        btn_cetak = new javax.swing.JButton();
        btn_ubah = new javax.swing.JButton();
        btn_reset = new javax.swing.JButton();
        btn_keluar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_transaksi = new javax.swing.JTable();
        txt_jumlah = new javax.swing.JTextField();
        txt_tanggal = new com.toedter.calendar.JDateChooser();
        txt_uangpembeli = new javax.swing.JTextField();
        txt_cari = new javax.swing.JTextField();
        txt_namapembeli = new javax.swing.JTextField();
        cb_namabarang = new javax.swing.JComboBox<>();
        cb_namamontir = new javax.swing.JComboBox<>();
        btn_dashboard = new javax.swing.JButton();
        btn_barang = new javax.swing.JButton();
        btn_montir = new javax.swing.JButton();
        btn_transaksi = new javax.swing.JButton();
        btn_nota = new javax.swing.JButton();
        btn_about = new javax.swing.JButton();
        panel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cariActionPerformed(evt);
            }
        });
        getContentPane().add(btn_cari, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 40, 120, 40));
        btn_cari.setOpaque(false);
        btn_cari.setContentAreaFilled(false);
        btn_cari.setBorderPainted(false);

        btn_hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_hapusActionPerformed(evt);
            }
        });
        getContentPane().add(btn_hapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 650, 130, 50));
        btn_hapus.setOpaque(false);
        btn_hapus.setContentAreaFilled(false);
        btn_hapus.setBorderPainted(false);

        btn_tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tambahActionPerformed(evt);
            }
        });
        getContentPane().add(btn_tambah, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 650, 140, 50));
        btn_tambah.setOpaque(false);
        btn_tambah.setContentAreaFilled(false);
        btn_tambah.setBorderPainted(false);

        btn_cetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cetakActionPerformed(evt);
            }
        });
        getContentPane().add(btn_cetak, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 650, 130, 50));
        btn_cetak.setOpaque(false);
        btn_cetak.setContentAreaFilled(false);
        btn_cetak.setBorderPainted(false);

        btn_ubah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ubahActionPerformed(evt);
            }
        });
        getContentPane().add(btn_ubah, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 650, 130, 50));
        btn_ubah.setOpaque(false);
        btn_ubah.setContentAreaFilled(false);
        btn_ubah.setBorderPainted(false);

        btn_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetActionPerformed(evt);
            }
        });
        getContentPane().add(btn_reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(933, 650, 140, 50));
        btn_reset.setOpaque(false);
        btn_reset.setContentAreaFilled(false);
        btn_reset.setBorderPainted(false);

        btn_keluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_keluarActionPerformed(evt);
            }
        });
        getContentPane().add(btn_keluar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 650, 130, 50));
        btn_keluar.setOpaque(false);
        btn_keluar.setContentAreaFilled(false);
        btn_keluar.setBorderPainted(false);

        tbl_transaksi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbl_transaksi);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 330, 920, 290));

        txt_jumlah.setBorder(null);
        getContentPane().add(txt_jumlah, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 190, 280, 40));

        txt_tanggal.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txt_tanggal, new org.netbeans.lib.awtextra.AbsoluteConstraints(851, 130, 280, 30));

        txt_uangpembeli.setBorder(null);
        getContentPane().add(txt_uangpembeli, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 270, 280, 30));

        txt_cari.setBorder(null);
        getContentPane().add(txt_cari, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 40, 290, 30));

        txt_namapembeli.setBorder(null);
        getContentPane().add(txt_namapembeli, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 200, 280, 30));

        cb_namabarang.setForeground(new java.awt.Color(255, 255, 255));
        cb_namabarang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih Barang--" }));
        cb_namabarang.setBorder(null);
        getContentPane().add(cb_namabarang, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 130, 280, 30));

        cb_namamontir.setForeground(new java.awt.Color(255, 255, 255));
        cb_namamontir.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih Montir--" }));
        cb_namamontir.setBorder(null);
        cb_namamontir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_namamontirActionPerformed(evt);
            }
        });
        getContentPane().add(cb_namamontir, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 260, 280, 30));

        btn_dashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_dashboardActionPerformed(evt);
            }
        });
        getContentPane().add(btn_dashboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 90, 40));
        btn_dashboard.setOpaque(false);
        btn_dashboard.setContentAreaFilled(false);
        btn_dashboard.setBorderPainted(false);

        btn_barang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_barangActionPerformed(evt);
            }
        });
        getContentPane().add(btn_barang, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 270, 90, 40));
        btn_barang.setOpaque(false);
        btn_barang.setContentAreaFilled(false);
        btn_barang.setBorderPainted(false);

        btn_montir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_montirActionPerformed(evt);
            }
        });
        getContentPane().add(btn_montir, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 330, 90, 40));
        btn_montir.setOpaque(false);
        btn_montir.setContentAreaFilled(false);
        btn_montir.setBorderPainted(false);

        btn_transaksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_transaksiActionPerformed(evt);
            }
        });
        getContentPane().add(btn_transaksi, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 380, 90, 40));
        btn_transaksi.setOpaque(false);
        btn_transaksi.setContentAreaFilled(false);
        btn_transaksi.setBorderPainted(false);

        btn_nota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_notaActionPerformed(evt);
            }
        });
        getContentPane().add(btn_nota, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 430, 90, 40));
        btn_nota.setOpaque(false);
        btn_nota.setContentAreaFilled(false);
        btn_nota.setBorderPainted(false);

        btn_about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aboutActionPerformed(evt);
            }
        });
        getContentPane().add(btn_about, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 540, 90, 40));
        btn_about.setOpaque(false);
        btn_about.setContentAreaFilled(false);
        btn_about.setBorderPainted(false);

        panel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bg_transaksi.png"))); // NOI18N
        getContentPane().add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cetakActionPerformed
        String url = "jdbc:mysql://localhost:3306/db_bengkelbaru";
        File reportFile = new File(".");
        String dirr = "";
        String jdbcDriver = "com.mysql.jdbc.Driver";
        String user = "root";
        String pass = "";

        JasperReport reports;

        File file = new File("src/Report/Transaksi.jasper");
        String path = file.getAbsolutePath();
        try {
            Class.forName(jdbcDriver);
            com.mysql.jdbc.Connection conn = (com.mysql.jdbc.Connection) DriverManager.getConnection(url, user, pass);
            Statement stat = conn.createStatement();
            reports = (JasperReport) JRLoader.loadObjectFromFile(path);
            JasperPrint jp = JasperFillManager.fillReport(path, null, conn);
            JasperViewer jv = new JasperViewer(jp, false);
            jv.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            jv.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(form_transaksi.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(form_transaksi.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(form_transaksi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_cetakActionPerformed

    private void btn_keluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_keluarActionPerformed
        dispose();
    }//GEN-LAST:event_btn_keluarActionPerformed

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetActionPerformed
        bersih();
    }//GEN-LAST:event_btn_resetActionPerformed

    private void btn_tambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tambahActionPerformed
        String Barang = cb_namabarang.getSelectedItem().toString();
        String strJumlah = txt_jumlah.getText();
        String namaMontir = cb_namamontir.getSelectedItem().toString();
        Date tanggal = txt_tanggal.getDate();
        String namaPembeli = txt_namapembeli.getText();
        String struangPembeli = txt_uangpembeli.getText();

        if (!Barang.equals("--Pilih Barang--")) {
            if (!strJumlah.equals("")) {
                if (!namaMontir.equals("--Pilih Montir--")) {
                    if (tanggal != null) {
                        if (!namaPembeli.equals("")) {
                            if (!struangPembeli.equals("")) {
                                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                                String strDate = dateFormat.format(tanggal);

                                Statement state;
                                try {
                                    state = kon.getConnection();
                                    String qwery = "SELECT * FROM barang_jasa WHERE nama_barang ='" + Barang + "'";
                                    ResultSet rs = state.executeQuery(qwery);

                                    boolean masuk = false;
                                    masuk = rs.next();

                                    if (masuk) {
                                        int kd_barang = rs.getInt(1);
                                        int harga = rs.getInt(3);
                                        int jumlah = Integer.parseInt(txt_jumlah.getText());
                                        //System.out.println(rs.getString("nama_barang"));
                                        int total = jumlah * harga;
                                        int uangPembeli = Integer.parseInt(txt_uangpembeli.getText());
                                        if (uangPembeli > total) {
                                            Statement state2 = kon.getConnection();
                                            String qwery2 = "SELECT kd_montir FROM montir WHERE nama_montir ='" + namaMontir + "'";
                                            ResultSet rs2 = state.executeQuery(qwery);

                                            boolean masuk2 = false;
                                            masuk2 = rs2.next();

                                            if (masuk2) {
                                                int kd_montir = rs2.getInt(1);
                                                int kembalian = uangPembeli - total;

                                                mytransaksi tran = new mytransaksi(kd_barang, Barang, namaPembeli, harga, jumlah, total, uangPembeli, kembalian, IdSaya, strDate, kd_montir, namaMontir);
                                                transaksi_manager tranm = new transaksi_manager();

                                                try {
                                                    if (tranm.inputData(tran) == true) {
                                                        JOptionPane.showMessageDialog(null, "Simpan Data Berhasil");
                                                        bersih();
                                                        cb_namabarang.requestFocus();
                                                        tampilTabelTransaksi();
                                                    } else {
                                                        JOptionPane.showMessageDialog(null, "Data gagal Disimpan");
                                                        cb_namabarang.requestFocus();
                                                    }
                                                } catch (ClassNotFoundException ex) {
                                                    Logger.getLogger(form_barang.class.getName()).log(Level.SEVERE, null, ex);
                                                }
                                            } else {
                                                JOptionPane.showMessageDialog(null, "Unknown Error!", "Error", JOptionPane.ERROR_MESSAGE);
                                            }
                                            /**/

                                        } else {
                                            JOptionPane.showMessageDialog(null, "Uang Pembeli Tidak Cukup! Total: " + total, "Error", JOptionPane.ERROR_MESSAGE);
                                        }
                                        //System.out.println(total);
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Unknown Error!", "Error", JOptionPane.ERROR_MESSAGE);
                                    }
                                } catch (ClassNotFoundException ex) {
                                    Logger.getLogger(form_transaksi.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (SQLException ex) {
                                    Logger.getLogger(form_transaksi.class.getName()).log(Level.SEVERE, null, ex);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Uang Pembeli tidak boleh kosong!", "Pesan", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Nama Pembeli tidak boleh kosong!", "Pesan", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Tanggal tidak boleh kosong!", "Pesan", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Nama Montir tidak boleh kosong!", "Pesan", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Jumlah tidak boleh kosong!", "Pesan", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nama Barang tidak boleh kosong!", "Pesan", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_tambahActionPerformed

    private void cb_namamontirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_namamontirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_namamontirActionPerformed

    private void btn_hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_hapusActionPerformed
        if (tbl_transaksi.getSelectedRow() != -1) {
            String idtarnsaksi = tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 0).toString();
            int jawab = JOptionPane.showConfirmDialog(rootPane, "Hapus Transaksi dengan kode " + idtarnsaksi + " ?", "Konfirmasi", JOptionPane.YES_NO_OPTION);

            if (jawab == JOptionPane.YES_OPTION) {
                transaksi_manager tranm = new transaksi_manager();
                try {
                    if (tranm.hapusData(Integer.parseInt(idtarnsaksi)) == true) {
                        JOptionPane.showMessageDialog(this, "Data Berhasil Dihapus");
                        bersih();
                        cb_namabarang.requestFocus();
                        tampilTabelTransaksi();
                    } else {
                        JOptionPane.showMessageDialog(this, "Data gagal dihapus");
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(form_barang.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pilih data yang akan dihapus!");
        }
    }//GEN-LAST:event_btn_hapusActionPerformed

    private void btn_cariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cariActionPerformed
        try {
            if (txt_cari.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Pilih data yang akan dicari!");
            } else {
                Statement state = null;
                state = kon.getConnection();
                int row = tbl_transaksi.getRowCount();
                for (int i = 0; i < row; i++) {
                    sTable.removeRow(0, row);
                }
                ResultSet rs = state.executeQuery("select * from transaksi where nama_pembeli like '%" + txt_cari.getText() + "%' order by kd_transaksi asc");
                while (rs.next()) {
                    mytransaksi trn = new mytransaksi();
                    trn.setKodeTransaksi(rs.getInt("kd_transaksi"));
                    trn.setKodeBarang(rs.getInt("kd_barang"));
                    trn.setNamaBarang(rs.getString("nama_barang"));
                    trn.setNamaPembeli(rs.getString("nama_pembeli"));
                    trn.setHarga(rs.getInt("harga"));
                    trn.setJumlah(rs.getInt("jumlah"));
                    trn.setTotal(rs.getInt("total_bayar"));
                    trn.setUang(rs.getInt("uang_pembeli"));
                    trn.setKembalian(rs.getInt("kembalian"));
                    trn.setId(rs.getInt("id"));
                    trn.setTanggal(rs.getString("tanggal"));
                    trn.setKodeMontir(rs.getInt("kd_montir"));
                    trn.setNamaMontir(rs.getString("nama_montir"));
                    sTable.add(trn);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(form_barang.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(form_barang.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_cariActionPerformed

    private void btn_ubahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ubahActionPerformed
        if (tbl_transaksi.getSelectedRow() != -1) {
            int id_transaksi = (int) tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 0);
            int kd_barang = (int) tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 1);
            int idKu = (int) tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 2);
            String nama_barang = tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 3).toString();
            String nama_pembeli = tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 4).toString();
            int harga = (int) tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 5);
            int jumlah = (int) tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 6);
            int total = (int) tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 7);
            int uangPembeli = (int) tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 8);
            int kembalian = (int) tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 9);
            String nama_montir = tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 10).toString();
            int kode_montir = (int) tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 11);
            String tanggal = tbl_transaksi.getModel().getValueAt(tbl_transaksi.getSelectedRow(), 12).toString();

            String in_namapembeli = !txt_namapembeli.getText().equals("") ? txt_namapembeli.getText() : nama_pembeli;
            String in_tanggal = "";
            if (txt_tanggal.getDate() != null) {
                Date tanggalku = txt_tanggal.getDate();
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                String strDate = dateFormat.format(tanggalku);
                in_tanggal = strDate;

            } else {
                in_tanggal = tanggal;
            }
            Date tanggaltbl = txt_tanggal.getDate();

            if (cb_namabarang.getSelectedItem().toString().equals("--Pilih Barang--")) {
                if (txt_jumlah.getText().equals("")) {
                    if (cb_namamontir.getSelectedItem().toString().equals("--Pilih Montir--")) {
                        if (txt_uangpembeli.getText().equals("")) {
                            if (txt_tanggal.getDate() != null) {
                                if (!txt_namapembeli.getText().equals("")) {
                                    mytransaksi tran = new mytransaksi(kd_barang, nama_barang, in_namapembeli, harga, jumlah, total, uangPembeli, kembalian, idKu, in_tanggal, kode_montir, nama_montir);
                                    transaksi_manager tranm = new transaksi_manager();

                                    try {
                                        if (tranm.updateData(tran, id_transaksi) == true) {
                                            JOptionPane.showMessageDialog(null, "Update Data Berhasil");
                                            bersih();
                                            txt_namapembeli.requestFocus();
                                            tampilTabelTransaksi();
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Data gagal Diupdate");
                                            txt_namapembeli.requestFocus();
                                        }
                                    } catch (ClassNotFoundException ex) {
                                        Logger.getLogger(form_barang.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Nama Pembeli tidak boleh kosong!", "Pesan", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Tanggal tidak boleh kosong!", "Pesan", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Tidak Bisa Merubah Uang Pembeli! Hanya Bisa merubah tanggal dan nama pembeli saja.", "Pesan", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Tidak Bisa Merubah Nama Montir! Hanya Bisa merubah tanggal dan nama pembeli saja.", "Pesan", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Tidak Bisa Merubah Jumlah! Hanya Bisa merubah tanggal dan nama pembeli saja.", "Pesan", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Tidak Bisa Merubah Nama Barang! Hanya Bisa merubah tanggal dan nama pembeli saja.", "Pesan", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Pilih data yang akan diubah!");
        }
    }//GEN-LAST:event_btn_ubahActionPerformed

    private void btn_dashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_dashboardActionPerformed
        try {
            dispose();
            new form_montir(Username, IdSaya).setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_dashboardActionPerformed

    private void btn_barangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_barangActionPerformed
        dispose();
        new form_barang(Username, IdSaya).setVisible(true);
    }//GEN-LAST:event_btn_barangActionPerformed

    private void btn_montirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_montirActionPerformed
        try {
            dispose();
            new form_montir(Username, IdSaya).setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_montirActionPerformed

    private void btn_transaksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_transaksiActionPerformed
        dispose();
        new form_transaksi(Username, IdSaya).setVisible(true);
    }//GEN-LAST:event_btn_transaksiActionPerformed

    private void btn_notaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_notaActionPerformed
        dispose();
        new form_nota(Username, IdSaya).setVisible(true);
    }//GEN-LAST:event_btn_notaActionPerformed

    private void btn_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aboutActionPerformed
        dispose();
        new form_about(Username, IdSaya).setVisible(true);
    }//GEN-LAST:event_btn_aboutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(form_transaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(form_transaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(form_transaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(form_transaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_about;
    private javax.swing.JButton btn_barang;
    private javax.swing.JButton btn_cari;
    private javax.swing.JButton btn_cetak;
    private javax.swing.JButton btn_dashboard;
    private javax.swing.JButton btn_hapus;
    private javax.swing.JButton btn_keluar;
    private javax.swing.JButton btn_montir;
    private javax.swing.JButton btn_nota;
    private javax.swing.JButton btn_reset;
    private javax.swing.JButton btn_tambah;
    private javax.swing.JButton btn_transaksi;
    private javax.swing.JButton btn_ubah;
    private javax.swing.JComboBox<String> cb_namabarang;
    private javax.swing.JComboBox<String> cb_namamontir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel panel;
    private javax.swing.JTable tbl_transaksi;
    private javax.swing.JTextField txt_cari;
    private javax.swing.JTextField txt_jumlah;
    private javax.swing.JTextField txt_namapembeli;
    private com.toedter.calendar.JDateChooser txt_tanggal;
    private javax.swing.JTextField txt_uangpembeli;
    // End of variables declaration//GEN-END:variables
}
